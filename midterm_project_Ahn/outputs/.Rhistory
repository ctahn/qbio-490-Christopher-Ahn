dds_obj <- DESeq(dds) # note: this will likely take a long time (ie 45 minutes to 2 hours)
?resultsNames
resultsNames(dds_obj)  # see what comparisons got run
# get the young vs. old comparison
?results
results <- results(dds_obj, format = "DataFrame", contrast = c("age_category", "Old", "Young")) # this is case sensitive so be careful to match it with your age_category factors closely!
# write code here
head(results)
# write code here
view(results)
# write code here
View(results)
# write code here
dim(results)
rownames(results)
log2foldchange
log2foldchange(results)
# write code here
head(results)
View(results)
dim(results)
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- subset(rna_genes$gene_name[gene_mask])
rna_genes$genes$genename
rna_genes$gene_name
gene_mask
rna_genes_subset
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- subset.data.frame(rna_genes$gene_name[gene_mask])
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask,]
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask]
results <- data.frame(rna_genes_subset, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(padj))
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask]
results <- data.frame(rna_genes_subset, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
# HINT: to get the gene names, you will need to create a boolean mask that is T when rna_genes$gene_id %in% results@rownames, and F if otherwise, then use this mask to subset rna_genes$gene_names for only the names that are in the results df
colnames(results) <- c("Gene Name", "Gene ID", "log2foldchange", "p-value", "padj", "-log10(padj)") ## FIX
sig_results <- (results$p-value < 0.05)
sig_results <- (results$"p-value" < 0.05)
sig_results
my_example_df = data.frame(x = c('index 1', 'index 2', 'index 3', 'index 4', 'index 5'),
y = c(2,4,3,5,1))
order_indexes = order(my_example_df$y) # order by column "y"
# we would expect order_indexes to be c(5, 1, 3, 2, 4) since the value 2 has the index 5, the value 2 has the index 1, the value 3 has the index 3, etc.
order_indexes
my_example_df = my_example_df[order_indexes, ] # this rewrites the df based on the sorted rows
my_example_df # check your df to see if it is sorted by the y values
up_reg_results <- order(results$log2foldchange)
up_reg_results
up_reg_results <- order(results$log2foldchange)
up_reg_results
up_reg_results <- order(results$log2foldchange)
results <- results[up_reg_results, ]
results
# write code here
up_reg_results <- (results$log2foldchange > 1)
# write code here
neg_log_mask <- !(results$log2foldchange < -1)
down_reg_results <- results[neg_log_mask,]
down_reg_results <- down_reg_results[order(down_reg_results$log2foldchange)]
# write code here
neg_log_mask <- !(results$log2foldchange < -1)
down_reg_results <- results[neg_log_mask,]
down_reg_results <- down_reg_results[order(down_reg_results$log2foldchange),]
# write code here
head(up_reg_results)
head(down_reg_results)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design =~ vital_status + ajcc_pathologic_stage + age_category)
?DESeq
dds_obj <- DESeq(dds) # note: this will likely take a long time (ie 45 minutes to 2 hours)
?resultsNames
resultsNames(dds_obj)  # see what comparisons got run
# get the young vs. old comparison
?results
results <- results(dds_obj, format = "DataFrame", contrast = c("age_category", "Old", "Young")) # this is case sensitive so be careful to match it with your age_category factors closely!
# write code here
head(results)
View(results)
dim(results)
# write code here
head(results)
View(results)
dim(results)
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask]
results <- data.frame(rna_genes_subset, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
# HINT: to get the gene names, you will need to create a boolean mask that is T when rna_genes$gene_id %in% results@rownames, and F if otherwise, then use this mask to subset rna_genes$gene_names for only the names that are in the results df
colnames(results) <- c("Gene Name", "Gene ID", "log2foldchange", "p-value", "padj", "-log10(padj)") ## FIX
sig_results <- (results$"p-value" < 0.05)
up_reg_results <- results[order(results$log2foldchange), ]
# write code here
up_reg_results <- up_reg_results[(up_reg_results$log2foldchange > 1),]
# write code here
neg_log_mask <- !(results$log2foldchange < -1)
down_reg_results <- results[neg_log_mask,]
down_reg_results <- down_reg_results[order(down_reg_results$log2foldchange),]
# write code here
head(up_reg_results)
head(down_reg_results)
View(down_reg_results)
# write code here
rownames(up_reg_results) <- up_reg_results$`Gene ID`
rownames(down_reg_results) <- down_reg_results$`Gene ID`
head(up_reg_results)
head(down_reg_results)
# write code here
results(down_reg_results)
# write code here
write.csv(up_reg_results, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/up_reg_results_data.csv", row.names = TRUE)
write.csv(down_reg_results, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/down_reg_results_data.csv", row.names = TRUE)
write.csv(results, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/results_data.csv", row.names = TRUE)
# install (using BiocManager) and load "EnhancedVolcano"
BiocManager::install("EnhancedVolcano")
library(EnchancedVolcano)
# install (using BiocManager) and load "EnhancedVolcano"
BiocManager::install("EnhancedVolcano")
library(EnhancedVolcano)
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2FoldChange", y = "pvalue")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "pvalue")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", none, shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", scale=none , shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
# create plot here
par(mar=c(10,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
par(mar=c(10,10,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
jpeg("Enhanced_Volcano_Plot.jpg")
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
dev.off()
# create plot here
jpeg("Enhanced_Volcano_Plot.jpg")
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
setwd("/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/midterm_project_Ahn") #Set the working directory to "outputs"
dir.create("outputs")
setwd("outputs")
#Load in required packages
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
a
#GDCdownload(maf_query)
maf <- GDCprepare(maf_query)
setwd("/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/midterm_project_Ahn") #Set the working directory to "outputs"
dir.create("outputs")
setwd("outputs")
#Load in required packages
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks")
if (!require("maftools", quietly = TRUE))
BiocManager::install("maftools")
library(BiocManager)
library(TCGAbiolinks)
library(maftools)
if(!require(survival)){
install.packages("survival")
}
library(survival)
if(!require(survminer)){
install.packages("survminer")
}
library(survminer)
if(!require(ggplot2)){
install.packages("ggplot2")
}
library(ggplot2)
BiocManager::install("DESeq2")
library(DESeq2)
BiocManager::install("EnhancedVolcano")
library(EnhancedVolcano)
#Load in the clinical data and adjust the column names to the Tumor_Sample_Barcode
clin_query <- GDCquery(project = "TCGA-BRCA",data.category = "Clinical",file.type = "xml")
#GDCdownload(clin_query)
clinic <- GDCprepare_clinic(clin_query,
clinical.info = "patient")
colnames(clinic)[ colnames(clinic) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
#Load in the clinical data and adjust the column names to the Tumor_Sample_Barcode
clin_query <- GDCquery(project = "TCGA-BRCA",data.category = "Clinical",file.type = "xml")
GDCdownload(clin_query)
#Load in required packages
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks")
if (!require("maftools", quietly = TRUE))
BiocManager::install("maftools")
library(BiocManager)
library(TCGAbiolinks)
library(maftools)
if(!require(survival)){
install.packages("survival")
}
library(survival)
if(!require(survminer)){
install.packages("survminer")
}
library(survminer)
if(!require(ggplot2)){
install.packages("ggplot2")
}
library(ggplot2)
BiocManager::install("DESeq2")
if(!require(DESeq2)){
BiocManager::install("DESeq2")
}
library(DESeq2)
BiocManager::install("EnhancedVolcano")
if(require(EnhancedVolcano)){
BiocManager::install("EnhancedVolcano")
}
library(EnhancedVolcano)
if(require(EnhancedVolcano)){
BiocManager::install("EnhancedVolcano")
}
if(!require(EnhancedVolcano)){
BiocManager::install("EnhancedVolcano")
}
library(EnhancedVolcano)
#Load in the clinical data and adjust the column names to the Tumor_Sample_Barcode
clin_query <- GDCquery(project = "TCGA-BRCA",data.category = "Clinical",file.type = "xml")
setwd("/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/midterm_project_Ahn") #Set the working directory to "outputs"
dir.create("outputs")
setwd("outputs")
#Load in required packages
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks")
if (!require("maftools", quietly = TRUE))
BiocManager::install("maftools")
library(BiocManager)
library(TCGAbiolinks)
library(maftools)
if(!require(survival)){
install.packages("survival")
}
library(survival)
if(!require(survminer)){
install.packages("survminer")
}
library(survminer)
if(!require(ggplot2)){
install.packages("ggplot2")
}
library(ggplot2)
if(!require(DESeq2)){
BiocManager::install("DESeq2")
}
library(DESeq2)
if(!require(EnhancedVolcano)){
BiocManager::install("EnhancedVolcano")
}
library(EnhancedVolcano)
#Load in the clinical data and adjust the column names to the Tumor_Sample_Barcode
clin_query <- GDCquery(project = "TCGA-BRCA",data.category = "Clinical",file.type = "xml")
GDCdownload(clin_query)
clinic <- GDCprepare_clinic(clin_query,
clinical.info = "patient")
colnames(clinic)[ colnames(clinic) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
#Load in maf_object data
maf_query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Simple Nucleotide Variation",
access = "open",
data.type = "Masked Somatic Mutation",
workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking")
#GDCdownload(maf_query)
maf <- GDCprepare(maf_query)
maf_object <- read.maf(maf = maf,
clinicalData = clinic,
isTCGA = TRUE)
#Load in rna_se object
rna_query <- GDCquery(project ="TCGA-BRCA",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts")
GDCdownload(rna_query)
rna_se <- GDCprepare(rna_query)
write.csv(rna_se, "rna_se.csv")
# Create new df's for RNA genes and RNA Clinical
clinic <- GDCprepare_clinic(clin_query,
clinical.info = "patient")
rna_genes <- rna_se@rowRanges@elementMetadata
rna_genes <- as.data.frame(rna_genes)
write.csv(rna_genes, "rna_genes.csv")
rna_clinical <-rna_se@colData
rna_clinical <- as.data.frame(rna_clinical)
write.csv(rna_clinical, "rna_clinical.csv")
treatments_mask <- !colnames(rna_clinical) %in% c('treatments', 'primary_site', 'disease_type')
rna_clinical <- rna_clinical[, treatments_mask]
write.csv(rna_clinical, "rna_clinical.csv")
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage)
rna_counts <- rna_se@assays@data$unstranded
write.csv(rna_counts, "rna_counts.csv")
# Transfer the Breast Carcinoma Data from the clinic df to the rna_clinical df
# Make a mask that is true for the patients that are in both the rna_clinical df and the clinic df
colnames(rna_clinical) [2] <- "bcr_patient_barcode"
patient_mask <- ifelse(rna_clinical$bcr_patient_barcode %in% clinic$bcr_patient_barcode, T, F)
# Remove the duplicate rows in clinic to change the row names to the bcr_patient_barcode
clinic_nonduplicates <- clinic[!duplicated(clinic), ]
row.names(clinic_nonduplicates) <- clinic_nonduplicates$bcr_patient_barcode
cleaned_rna_clinical <- rna_clinical[patient_mask, ]
cleaned_rna_clinical$breast_carcinoma_estrogen_receptor_status <-
ifelse(clinic_nonduplicates[cleaned_rna_clinical$bcr_patient_barcode, "breast_carcinoma_estrogen_receptor_status"] == "Positive", T, F)
rna_na_mask <- ifelse(!is.na(cleaned_rna_clinical$breast_carcinoma_estrogen_receptor_status), T, F)
cleaned_rna_clinical <- cleaned_rna_clinical[rna_na_mask, ]
cleaned_rna_clinical$breast_carcinoma_estrogen_receptor_status <- factor(cleaned_rna_clinical$breast_carcinoma_estrogen_receptor_status)
na_mask <-  ifelse(is.na(cleaned_rna_clinical$ajcc_pathologic_stage), F, T)
cleaned_rna_clinical <-  cleaned_rna_clinical[na_mask, ]
na_mask <-  ifelse(is.na(rna_clinical$ajcc_pathologic_stage), F, T)
rna_counts <- rna_counts[, na_mask]
row_sums <- rowSums(rna_counts)
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[low_counts_mask,]
#update rna_genes with the low_counts_mas
rna_genes <- rna_genes[low_counts_mask,]
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = cleaned_rna_clinical,
design =~ vital_status + ajcc_pathologic_stage + breast_carcinoma_estrogen_receptor_status)
ncol(countData)
ncols(countData)
ncol(rna_counts)
nrow(cleaned_rna_clinical)
nrow(cleaned_rna_clinical)
View(rna_clinical)
patient_mask
View(clinic)
colnames(clinic)[ colnames(clinic) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
# Transfer the Breast Carcinoma Data from the clinic df to the rna_clinical df
# Make a mask that is true for the patients that are in both the rna_clinical df and the clinic df
colnames(rna_clinical) [2] <- "bcr_patient_barcode"
patient_mask <- ifelse(rna_clinical$bcr_patient_barcode %in% clinic$bcr_patient_barcode, T, F)
# Remove the duplicate rows in clinic to change the row names to the bcr_patient_barcode
clinic_nonduplicates <- clinic[!duplicated(clinic), ]
row.names(clinic_nonduplicates) <- clinic_nonduplicates$bcr_patient_barcode
cleaned_rna_clinical <- rna_clinical[patient_mask, ]
View(cleaned_rna_clinical)
patient_mask
colnames(clinic)[ colnames(clinic) == "Tumor_Sample_Barcode" ] <- "bcr_patient_barcode"
patient_mask <- ifelse(rna_clinical$bcr_patient_barcode %in% clinic$bcr_patient_barcode, T, F)
patient_mask
# Remove the duplicate rows in clinic to change the row names to the bcr_patient_barcode
clinic_nonduplicates <- clinic[!duplicated(clinic), ]
row.names(clinic_nonduplicates) <- clinic_nonduplicates$bcr_patient_barcode
cleaned_rna_clinical <- rna_clinical[patient_mask, ]
View(cleaned_rna_clinical)
cleaned_rna_clinical$breast_carcinoma_estrogen_receptor_status <-
ifelse(clinic_nonduplicates[cleaned_rna_clinical$bcr_patient_barcode, "breast_carcinoma_estrogen_receptor_status"] == "Positive", T, F)
rna_na_mask <- ifelse(!is.na(cleaned_rna_clinical$breast_carcinoma_estrogen_receptor_status), T, F)
cleaned_rna_clinical <- cleaned_rna_clinical[rna_na_mask, ]
cleaned_rna_clinical$breast_carcinoma_estrogen_receptor_status <- factor(cleaned_rna_clinical$breast_carcinoma_estrogen_receptor_status)
na_mask <-  ifelse(is.na(cleaned_rna_clinical$ajcc_pathologic_stage), F, T)
cleaned_rna_clinical <-  cleaned_rna_clinical[na_mask, ]
na_mask <-  ifelse(is.na(rna_clinical$ajcc_pathologic_stage), F, T)
rna_counts <- rna_counts[, na_mask]
row_sums <- rowSums(rna_counts)
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[low_counts_mask,]
#update rna_genes with the low_counts_mas
rna_genes <- rna_genes[low_counts_mask,]
ncol(rna_counts)
nrow(cleaned_rna_clinical)
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = cleaned_rna_clinical,
design =~ vital_status + ajcc_pathologic_stage + breast_carcinoma_estrogen_receptor_status)
dds_obj <- DESeq(dds) # note: this will likely take a long time (ie 45 minutes to 2 hours)
resultsNames(dds_obj)  # see what comparisons got run
# get the Positive vs. Negative comparison
results <- results(
dds_obj, format = "DataFrame", contrast = c("breast_carcinoma_estrogen_receptor_status", "Positive", "Negative"))
# get the Positive vs. Negative comparison
results <- results(
dds_obj, format = "DataFrame", contrast = c("breast_carcinoma_estrogen_receptor_status", "TRUE", "FALSE"))
# Filter out te genes that are not in results
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask]
# Add columns to results
results <- data.frame(rna_genes_subset, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
colnames(results) <- c("Gene Name", "Gene ID", "log2foldchange", "p-value", "padj", "-log10(padj)")
# Add columns to results
results <- data.frame(rna_genes_subset, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
gene_mask
View(rna_genes)
# Add columns to results
results <- data.frame(rna_genes, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
rownames(results)
# get the Positive vs. Negative comparison
results <- results(
dds_obj, format = "DataFrame", contrast = c("breast_carcinoma_estrogen_receptor_status", "TRUE", "FALSE"))
head(results)
# get the Positive vs. Negative comparison
results <- results(
dds_obj, format = "DataFrame", contrast = c("breast_carcinoma_estrogen_receptor_status", "TRUE", "FALSE"))
View(results)
results@rownames
# get the Positive vs. Negative comparison
?results
# Add columns to results
results <- data.frame(rna_genes, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
# Add columns to results
results <- data.frame(rna_genes, results, results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
View(results)
colnames(results) <- c("Gene Name", "Gene ID", "log2foldchange", "p-value", "padj", "-log10(padj)")
sig_results <- (results$"p-value" < 0.05)
# up_reg_results <- results[order(results$log2foldchange), ]
# up_reg_results <- up_reg_results[(up_reg_results$log2foldchange > 1),]
# neg_log_mask <- !(results$log2foldchange < -1)
# down_reg_results <- results[neg_log_mask,]
# down_reg_results <- down_reg_results[order(down_reg_results$log2foldchange),]
# rownames(up_reg_results) <- up_reg_results$`Gene ID`
# rownames(down_reg_results) <- down_reg_results$`Gene ID`
par(mar=c(1,1,1,1))
jpeg("Enhanced_Volcano_Plot.jpg")
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# get the Positive vs. Negative comparison
results <- results(
dds_obj, format = "DataFrame", contrast = c("breast_carcinoma_estrogen_receptor_status", "TRUE", "FALSE"))
# Add columns to results
results <- data.frame(rna_genes, results, results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
colnames(results) <- c("Gene Name", "Gene ID", "log2foldchange", "p-value", "padj", "-log10(padj)")
sig_results <- (results$"p-value" < 0.05)
up_reg_results <- results[order(results$log2foldchange), ]
up_reg_results <- up_reg_results[(up_reg_results$log2foldchange > 1),]
neg_log_mask <- !(results$log2foldchange < -1)
down_reg_results <- results[neg_log_mask,]
down_reg_results <- down_reg_results[order(down_reg_results$log2foldchange),]
rownames(up_reg_results) <- up_reg_results$`Gene ID`
rownames(down_reg_results) <- down_reg_results$`Gene ID`
par(mar=c(1,1,1,1))
jpeg("Enhanced_Volcano_Plot.jpg")
# get the Positive vs. Negative comparison
results <- results(
dds_obj, format = "DataFrame", contrast = c("breast_carcinoma_estrogen_receptor_status", "TRUE", "FALSE"))
# Add columns to results
results <- data.frame(rna_genes, results, results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
colnames(results) <- c("Gene Name", "Gene ID", "log2foldchange", "p-value", "padj", "-log10(padj)")
# Add columns to results
results <- data.frame(rna_genes, results, results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
# get the Positive vs. Negative comparison
results <- results(
dds_obj, format = "DataFrame", contrast = c("breast_carcinoma_estrogen_receptor_status", "TRUE", "FALSE"))
# Add columns to results
results <- data.frame(rna_genes, results, results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
sig_results <- (results$"p-value" < 0.05)
up_reg_results <- results[order(results$log2foldchange), ]
up_reg_results <- up_reg_results[(up_reg_results$log2foldchange > 1),]
up_reg_results <- results[order(results$log2foldchange), ]
drop <- c("Gene Name", "Gene ID", "log2foldchange", "p-value", "padj", "-log10(padj)")
cleaned_results <- results[,!names(results) %in% drop]
View(cleaned_results)
keep <- c("Gene Name", "Gene ID", "log2FoldChange", "p-value", "padj", "-log10(padj)")
cleaned_results <- results[,names(results) %in% keep]
keep <- c("gene_name", "gene_id", "log2FoldChange", "pvalue", "padj")
cleaned_results <- results[,names(results) %in% keep]
cleaned_results$"-log10(padj)" <- -log10(cleaned_results$padj)
sig_results <- (cleaned_results$"p-value" < 0.05)
sig_results <- (cleaned_results$"p-value" < 0.05)
up_reg_results <- cleaned_results[order(cleaned_results$log2FoldChange), ]
up_reg_results <- up_reg_results[(up_reg_results$log2foldchange > 1),]
neg_log_mask <- !(cleaned_results$log2FoldChange < -1)
down_reg_results <- cleaned_results[neg_log_mask,]
down_reg_results <- down_reg_results[order(down_reg_results$log2FoldChange),]
rownames(up_reg_results) <- up_reg_results$`Gene ID`
View(down_reg_results)
rownames(up_reg_results) <- up_reg_results$gene_id
rownames(down_reg_results) <- down_reg_results$gene_id
par(mar=c(1,1,1,1))
jpeg("Enhanced_Volcano_Plot.jpg")
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
EnhancedVolcano(results, lab = rownames(results), x = "log2FoldChange", y = "pvalue")
dev.off()
