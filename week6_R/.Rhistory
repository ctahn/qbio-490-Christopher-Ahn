print("This is a code block!")
getwd()
# replace path with the path to your qbio_490_name directory
knitr::opts_knit$set(root.dir = normalizePath("/User/christopherahn/Documents/QBIO_490/qbio-Christopher-Ahn"))
# replace path with the path to your qbio_490_name directory
knitr::opts_knit$set(root.dir = normalizePath("/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn"))
var_string <- "hello world!"
var_num <- 23
var_vector <- c(3, 2, 1)
## Create a new variable my_var to store anything you choose:
my_var <- 5
print(my_var)
# Undefined Values
## create an undefined value in two different ways
null <- NULL
na <- NA
# Boolean Value is either true or false
## booleans can be defined in a variety of ways in R!
true_var <- true
# Undefined Values
## create an undefined value in two different ways
null <- NULL
na <- NA
# Boolean Value is either true or false
## booleans can be defined in a variety of ways in R!
true_var <- 1
false_var <- 0
## numeric is a catch all for any number value in R
negative <- -2
decimal <- 0.3
## a string is any text value
## strings can be enclosed in single or double quote
string_var <- "Hello world"
char_var <- c
## vectors contain data elements of the same data type
## they are declared by enclosing elements in c()
vector <- c()
## a factor is a categorical variable
## a factor has data elements (defined like a vector) and categories (known also as levels), that are inferred from the data
factor <- factor(vector)
factor
# Undefined Values
## create an undefined value in two different ways
null <- NULL
na <- NA
# Boolean Value is either true or false
## booleans can be defined in a variety of ways in R!
true_var <- T
false_var <- F
## numeric is a catch all for any number value in R
negative <- -2
decimal <- 0.3
## a string is any text value
## strings can be enclosed in single or double quote
string_var <- "Hello world"
char_var <- c
## vectors contain data elements of the same data type
## they are declared by enclosing elements in c()
vector <- c()
## a factor is a categorical variable
## a factor has data elements (defined like a vector) and categories (known also as levels), that are inferred from the data
factor <- factor(vector)
factor
# Undefined Values
## create an undefined value in two different ways
null <- NULL
na <- NA
# Boolean Value is either true or false
## booleans can be defined in a variety of ways in R!
true_var <- T
false_var <- F
## numeric is a catch all for any number value in R
negative <- -2
decimal <- 0.3
## a string is any text value
## strings can be enclosed in single or double quote
string_var <- "Hello world"
char_var <- c
## vectors contain data elements of the same data type
## they are declared by enclosing elements in c()
vector <- c()
## a factor is a categorical variable
## a factor has data elements (defined like a vector) and categories (known also as levels), that are inferred from the data
factor <- factor(vector)
factor
# Undefined Values
## create an undefined value in two different ways
null <- NULL
na <- NA
# Boolean Value is either true or false
## booleans can be defined in a variety of ways in R!
true_var <- T
false_var <- F
## numeric is a catch all for any number value in R
negative <- -2
decimal <- 0.3
## a string is any text value
## strings can be enclosed in single or double quote
string_var <- "Hello world"
char_var <- c
## vectors contain data elements of the same data type
## they are declared by enclosing elements in c()
vector <- c(1, 2, 3)
## a factor is a categorical variable
## a factor has data elements (defined like a vector) and categories (known also as levels), that are inferred from the data
factor <- factor(vector)
factor
## great names:
sum_of_ages <- sum(numeric_vector) # snake case
name <- "Chris"
age <- 20
birthday <- "06/03/2002"
three_fav_colors <- c("Blue", "Green", "Yellow")
print(name, age, birthday, three_fav_colors)
name <- "Chris"
age <- 20
birthday <- "06/03/2002"
three_fav_colors <- c("Blue", "Green", "Yellow")
print(name)
, age, birthday, three_fav_colors)
name <- "Chris"
age <- 20
birthday <- "06/03/2002"
three_fav_colors <- c("Blue", "Green", "Yellow")
print(name)
print(age)
print(birthday)
print(hree_fav_colors)
name <- "Chris"
age <- 20
birthday <- "06/03/2002"
three_fav_colors <- c("Blue", "Green", "Yellow")
print(name)
print(age)
print(birthday)
print(three_fav_colors)
sum(3, 4, 5) ## calling the function without saving the output automatically prints to the console
max_value <- max(1, 10, 100) ## storing to a variable does not automatically print
max_value
list_of_numbers <- c(1, 1, 2, 3, 5, 8, 13, 21)
sum(list_of_numbers)
list_of_numbers <- c(1, 1, 2, 3, 5, 8, 13, 21)
sum(list_of_numbers)
min(list_of_numbers)
mean(list_of_numbers)
mode(list_of_numbers)
summary(list_of_numbers)
"QBIO" == "QBIO" ## is equal to
"USC" != "UCLA" ## is not equal to
10 > 9 ## greater than
1 < 2 ## less than
8 >= 3 ## greater than or equal to
4 <= 7 ## less than or equal to
100 %in% c(10, 100, 1000, 10000) ## is present in a vector/list
"cat" == "cat" & "dog" == "dog" # prediction: TRUE
"cat" == "cat" & "fish" == "hamster" # prediction: FALSE
1 < 2 | 3 < 1 # prediction: TRUE
1 < 2 | 3 < 5 # prediction: TRUE
"blue" %in% c("yellow", "red", "blue") &! "happy" %in% c("sad", "angry")
# prediction: TRUE
if (1 > 2) {
# action
} else if (1 == 1) {
print("Success!")
} else {
# action
}
new_list <- c("starbucks", "elephant", 232, "magenta", -10)
if (7.5 %in% new_list) {
print("A")
if (!7.5 %in% new_list) {
print ("B")
}
} else if  (!(232 %in% new_list)) {
print("C")
} else if ("starbucks" %in% new_list &! 9 > 10) {
print("D")
if (100 < 1 | "elephant" %in% new_list) {
print("E")
}
else if ("magenta" %in% new_list) {
print("F")
}
} else {
print("G")
}
new_list <- c("starbucks", "elephant", 232, "magenta", -10)
if (7.5 %in% new_list) {
print("A")
if (!7.5 %in% new_list) {
print ("B")
}
} else if  (!(232 %in% new_list)) {
print("C")
} else if ("starbucks" %in% new_list &! 9 > 10) {
print("D")
if (100 < 1 | "elephant" %in% new_list) {
print("E")
}
else if ("magenta" %in% new_list) {
print("F")
}
} else {
print("G")
} # Prediction: "D", "E"
i = 1
while (i < 10) {
print(i)
i = i + 2
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (condition) {
# do something
# update condition
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
x++
mean <- (my_list)
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
x += 1
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
x += 1
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
x = x +1
mean <- (my_list)
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
x = x + 1
mean <- mean(my_list)
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
x = x + 1
my_list <- c(1, 10, x)
mean <- mean(my_list)
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
x = x + 1
my_list <- c(1, 10, x)
mean <- mean(my_list)
}
print(x)
list <- c(2, 4, 6, 8)
for (element in list) { # note that I can call "element" whatever I want, it like a temporary variable that stores the list's item
print (element * 2)
}
list <- c(1, 5, 20, 0)
for(element in list){
print(element^3)
}
for(i in -7:7){
print(i)
}
list <- c(1, 10, 100)
# using a loop
sum_loop <- 0
for (i in list) {
sum_loop = sum_loop + i
}
# using a function
sum_func <- sum(list)
# they are the same!
sum_loop
sum_func
sum_loop == sum_func
vector <- c("CSCI102", "CSCI103", "CSCI104")
vector[3] ## remember that R is a one indexed language, so we start counting from 1 (not 0)
vector <- 1:10^6 # here's a huge vector (all numbers between 1 and 10^6)
loop_sum <- function(vector) { # here, I created a user-defined function that sums up the elements in "vector" using a loop
x=0
for (i in vector) {
x = x + i
}
return(x)
}
function_sum <- sum(vector) # here, we sum up the elements in "vector" using a built-in vectorized function
loop_sum(vector) == function_sum # tests that these are equal
install.packages("rbenchmark")
library(rbenchmark) # this library allows us to use the benchmark function to explore run time
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
data(mtcars)
View(mtcars)
str(mtcars) # str stands for structure
str(mpg)
str($mpg)
str($ mpg)
str(mtcars$mpg)
# call functions here
mtcars$ # fill in name of carburetor column here
# call functions here
mtcars$colnames() # fill in name of carburetor column here
# call functions here
colnames() # fill in name of carburetor column here
# call functions here
mtcars$colnames() # fill in name of carburetor column here
# call functions here
colnames(mtcars) # fill in name of carburetor column here
mtcars[2, 4] # access the value from the second row, fourth column (this is the horsepower of a Mazda RX4 Wag)
mtcars[1, ] # access all values in the first row (all info on the Mazda RX4)
mtcars[ , 1] # access all values in the first column (mpg info for all cars)
mtcars[1:5, c(1, 4, 6)] # rows one through five and columns 1, 4, and 6
mtcars[-(3:30), ] # access everything EXCEPT rows 3 through 30
mtcars[ , c(-(1:4), -6)] # access everything EXCEPT columns 1 through 4 and column 6
mtcars[$Duster360, $hp]
mtcars[Duster360, $hp]
mtcars[Duster360, hp]
mtcars[rownames(mtcars$Duster360), ]
mtcars[rownames(mtcars$Duster360), colnames(mtcars$hp)]
rownames(mtcars$Duster360)
mtcars$Duster360
mtcars$Duster 360
mtcars$"Duster 360"
mtcars[rownames("Duster 360"), colnames("hp")]
rownames(mtcars)
rownames(mtcars)
colnames(mtcars)
rownames(mtcars)
colnames(mtcars)
mtcars[7, 4]
mtcars[16, 4]
mtcars[31, 4]
mtcars$transmission <- ifelse(am == 0, "automatic", "manual")
mtcars$transmission <- ifelse(mtcars$am == 0, "automatic", "manual")
rownames(mtcars)
colnames(mtcars)
colnames(mtcars)
mtcars_copy <- mtcars[ , -9]
data(mtcars_copy)
data(mtcars_copy)
colnames(mtcars)
mtcars_copy <- mtcars[ , -9]
data(mtcars_copy)
data(mtcars_copy)
str(mtcars_copy)
data(mtcars_copy)
str(mtcars_copy)
colnames(mtcars)
rownames(mtcars)
mtcars_copy <- mtcars[1;, -9]
colnames(mtcars)
rownames(mtcars)
mtcars_copy <- mtcars[1:32, -9]
data(mtcars_copy)
str(mtcars_copy)
df_copy <- df[rows_to_keep, columns_to_keep]
?is.na()
if (!require(swirl)){
install.packages("swirl")
}
library(swirl)
install_course_github("swirldev", "R_Programming_E")
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
print(my_vector)
my_vector
dim(my_vector)
0
bye()
bye()
