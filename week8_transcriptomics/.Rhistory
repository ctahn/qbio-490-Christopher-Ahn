low_counts_mask <- ifelse(rna_counts$row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
#rna_counts <- rna_counts[, low_counts_mask]
#update rna_genes with the low_counts_mas
#rna_genes <- rna_genes[low_counts_mask]
low_counts_mask
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
#rna_counts <- rna_counts[, low_counts_mask]
#update rna_genes with the low_counts_mas
#rna_genes <- rna_genes[low_counts_mask]
low_counts_mask
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[, low_counts_mask]
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[,low_counts_mask]
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts)
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- T
row_sums <- rowSums(rna_counts[2:114])
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[,low_counts_mask]
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
#rna_clinical <- read.csv("brca_rna_clinical_data.csv")
View(rna_counts)
nrow(rna_counts)
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[1:60660])
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[1:60660,])
ncol(rna_counts)
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[low_counts_mask,]
#update rna_genes with the low_counts_mas
rna_genes <- rna_genes[low_counts_mask,]
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design = ~rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Old", "Young"))
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage, levels=c())
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
ncol(rna_counts)
nrow(rna_clinical)
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
ncol(rna_counts)
nrow(rna_clinical)
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage, levels=c())
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[low_counts_mask,]
#update rna_genes with the low_counts_mas
rna_genes <- rna_genes[low_counts_mask,]
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[2:114,],
colData = rna_clinical,
design = ~rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[,2:114],
colData = rna_clinical,
design = ~rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
head(rna_clinical$age_category)
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage, levels=c())
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[low_counts_mask,]
#update rna_genes with the low_counts_mas
rna_genes <- rna_genes[low_counts_mask,]
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[,2:114],
colData = rna_clinical,
design = ~rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[,2:114],
colData = rna_clinical,
design = ~ rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[,2:114],
colData = rna_clinical,
design = ~ rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[,2:114],
colData = rna_clinical,
design =~ rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[,2:114],
colData = rna_clinical,
design =~ rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[,2:114],
colData = rna_clinical,
design =~ rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
head(rna_clinical$age_category)
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage, levels=c())
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[low_counts_mask,]
#update rna_genes with the low_counts_mas
rna_genes <- rna_genes[low_counts_mask,]
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[,2:114],
colData = rna_clinical,
design =~ rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
rna_clinical$vital_status
rna_clinical$ajcc_pathologic_stage
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
head(rna_clinical$age_category)
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage)
rna_clinical$ajcc_pathologic_stage
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
head(rna_clinical$age_category)
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage)
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
head(rna_clinical$age_category)
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage)
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
#rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
#rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
na_mask
na_mask <-  ifelse(is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
#rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
#rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
na_mask
na_mask <-  ifelse(is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
ncol(rna_counts)
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:113])
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[low_counts_mask,]
#update rna_genes with the low_counts_mas
rna_genes <- rna_genes[low_counts_mask,]
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[,2:113],
colData = rna_clinical,
design =~ rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
rna_clinical$ajcc_pathologic_stage
rna_clinical$vital_status
rna_clinical$age_category
nrows(rna_counts)
ncol(rna_counts)
nrows(rna_clinical)
nrow(rna_clnical)
nrow(rna_clinical)
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv", row.names = 1)
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv", row.names = 1)
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category)
rna_clinical$age_category
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category)
head(rna_clinical$age_category)
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage)
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts)
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[low_counts_mask,]
#update rna_genes with the low_counts_mas
rna_genes <- rna_genes[low_counts_mask,]
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design =~ rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design =~ vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design =~ vital_status + ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design =~ vital_status + ajcc_pathologic_stage + age_category)
?DESeq
dds_obj <- DESeq(dds) # note: this will likely take a long time (ie 45 minutes to 2 hours)
?resultsNames
resultsNames(dds_obj)  # see what comparisons got run
# get the young vs. old comparison
?results
results <- results(dds_obj, format = "DataFrame", contrast = c("age_category", "Old", "Young")) # this is case sensitive so be careful to match it with your age_category factors closely!
# write code here
head(results)
# write code here
view(results)
# write code here
View(results)
# write code here
dim(results)
rownames(results)
log2foldchange
log2foldchange(results)
# write code here
head(results)
View(results)
dim(results)
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- subset(rna_genes$gene_name[gene_mask])
rna_genes$genes$genename
rna_genes$gene_name
gene_mask
rna_genes_subset
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- subset.data.frame(rna_genes$gene_name[gene_mask])
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask,]
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask]
results <- data.frame(rna_genes_subset, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(padj))
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask]
results <- data.frame(rna_genes_subset, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
# HINT: to get the gene names, you will need to create a boolean mask that is T when rna_genes$gene_id %in% results@rownames, and F if otherwise, then use this mask to subset rna_genes$gene_names for only the names that are in the results df
colnames(results) <- c("Gene Name", "Gene ID", "log2foldchange", "p-value", "padj", "-log10(padj)") ## FIX
sig_results <- (results$p-value < 0.05)
sig_results <- (results$"p-value" < 0.05)
sig_results
my_example_df = data.frame(x = c('index 1', 'index 2', 'index 3', 'index 4', 'index 5'),
y = c(2,4,3,5,1))
order_indexes = order(my_example_df$y) # order by column "y"
# we would expect order_indexes to be c(5, 1, 3, 2, 4) since the value 2 has the index 5, the value 2 has the index 1, the value 3 has the index 3, etc.
order_indexes
my_example_df = my_example_df[order_indexes, ] # this rewrites the df based on the sorted rows
my_example_df # check your df to see if it is sorted by the y values
up_reg_results <- order(results$log2foldchange)
up_reg_results
up_reg_results <- order(results$log2foldchange)
up_reg_results
up_reg_results <- order(results$log2foldchange)
results <- results[up_reg_results, ]
results
# write code here
up_reg_results <- (results$log2foldchange > 1)
# write code here
neg_log_mask <- !(results$log2foldchange < -1)
down_reg_results <- results[neg_log_mask,]
down_reg_results <- down_reg_results[order(down_reg_results$log2foldchange)]
# write code here
neg_log_mask <- !(results$log2foldchange < -1)
down_reg_results <- results[neg_log_mask,]
down_reg_results <- down_reg_results[order(down_reg_results$log2foldchange),]
# write code here
head(up_reg_results)
head(down_reg_results)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design =~ vital_status + ajcc_pathologic_stage + age_category)
?DESeq
dds_obj <- DESeq(dds) # note: this will likely take a long time (ie 45 minutes to 2 hours)
?resultsNames
resultsNames(dds_obj)  # see what comparisons got run
# get the young vs. old comparison
?results
results <- results(dds_obj, format = "DataFrame", contrast = c("age_category", "Old", "Young")) # this is case sensitive so be careful to match it with your age_category factors closely!
# write code here
head(results)
View(results)
dim(results)
# write code here
head(results)
View(results)
dim(results)
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask]
results <- data.frame(rna_genes_subset, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
# HINT: to get the gene names, you will need to create a boolean mask that is T when rna_genes$gene_id %in% results@rownames, and F if otherwise, then use this mask to subset rna_genes$gene_names for only the names that are in the results df
colnames(results) <- c("Gene Name", "Gene ID", "log2foldchange", "p-value", "padj", "-log10(padj)") ## FIX
sig_results <- (results$"p-value" < 0.05)
up_reg_results <- results[order(results$log2foldchange), ]
# write code here
up_reg_results <- up_reg_results[(up_reg_results$log2foldchange > 1),]
# write code here
neg_log_mask <- !(results$log2foldchange < -1)
down_reg_results <- results[neg_log_mask,]
down_reg_results <- down_reg_results[order(down_reg_results$log2foldchange),]
# write code here
head(up_reg_results)
head(down_reg_results)
View(down_reg_results)
# write code here
rownames(up_reg_results) <- up_reg_results$`Gene ID`
rownames(down_reg_results) <- down_reg_results$`Gene ID`
head(up_reg_results)
head(down_reg_results)
# write code here
results(down_reg_results)
# write code here
write.csv(up_reg_results, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/up_reg_results_data.csv", row.names = TRUE)
write.csv(down_reg_results, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/down_reg_results_data.csv", row.names = TRUE)
write.csv(results, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/results_data.csv", row.names = TRUE)
# install (using BiocManager) and load "EnhancedVolcano"
BiocManager::install("EnhancedVolcano")
library(EnchancedVolcano)
# install (using BiocManager) and load "EnhancedVolcano"
BiocManager::install("EnhancedVolcano")
library(EnhancedVolcano)
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2FoldChange", y = "pvalue")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "pvalue")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", none, shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", scale=none , shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
# create plot here
par(mar=c(10,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
par(mar=c(10,10,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
jpeg("Enhanced_Volcano_Plot.jpg")
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
dev.off()
# create plot here
jpeg("Enhanced_Volcano_Plot.jpg")
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
