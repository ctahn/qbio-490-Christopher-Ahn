rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
head(rna_clinical$age_category)
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage, levels=c())
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[low_counts_mask,]
#update rna_genes with the low_counts_mas
rna_genes <- rna_genes[low_counts_mask,]
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[,2:114],
colData = rna_clinical,
design =~ rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
rna_clinical$vital_status
rna_clinical$ajcc_pathologic_stage
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
head(rna_clinical$age_category)
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage)
rna_clinical$ajcc_pathologic_stage
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
head(rna_clinical$age_category)
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage)
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv")
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
head(rna_clinical$age_category)
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage)
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(!is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
#rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
#rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
na_mask
na_mask <-  ifelse(is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
#rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
#rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
na_mask
na_mask <-  ifelse(is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:114])
ncol(rna_counts)
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts[,2:113])
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[low_counts_mask,]
#update rna_genes with the low_counts_mas
rna_genes <- rna_genes[low_counts_mask,]
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts[,2:113],
colData = rna_clinical,
design =~ rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
rna_clinical$ajcc_pathologic_stage
rna_clinical$vital_status
rna_clinical$age_category
nrows(rna_counts)
ncol(rna_counts)
nrows(rna_clinical)
nrow(rna_clnical)
nrow(rna_clinical)
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv", row.names = 1)
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category, levels=c("Young", "Old"))
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv", row.names = 1)
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category)
rna_clinical$age_category
?factor
# write code here
rna_clinical$age_category <- factor(rna_clinical$age_category)
head(rna_clinical$age_category)
# write code here
rna_clinical$vital_status <- factor(rna_clinical$vital_status)
rna_clinical$ajcc_pathologic_stage <- factor(rna_clinical$ajcc_pathologic_stage)
# write code here
sum(is.na(rna_clinical$vital_status))
sum(is.na(rna_clinical$ajcc_pathologic_stage))
sum(is.na(rna_clinical$age_category))
na_mask <-  ifelse(is.na(rna_clinical$ajcc_pathologic_stage), F, T)# you can use multiple NA masks if you have multiple columns with NA values (or you can do it all in one!)
rna_clinical <-  rna_clinical[na_mask, ]# think about where the mask goes in the df[rows, columns] notation
rna_counts <- rna_counts[, na_mask] # does the mask go in the same or opposite location?
# use rowSums() to create a list with the total number of counts of each gene
row_sums <- rowSums(rna_counts)
# create a boolean mask where genes with < 10 total counts are FALSE, and genes with >= 10 total counts are TRUE
low_counts_mask <- ifelse(row_sums < 10, F, T)
# rewrite the rna_counts df, subsetting for only genes with >= 10 total counts
rna_counts <- rna_counts[low_counts_mask,]
#update rna_genes with the low_counts_mas
rna_genes <- rna_genes[low_counts_mask,]
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design =~ rna_clinical$vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design =~ vital_status + rna_clinical$ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design =~ vital_status + ajcc_pathologic_stage + rna_clinical$age_category)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design =~ vital_status + ajcc_pathologic_stage + age_category)
?DESeq
dds_obj <- DESeq(dds) # note: this will likely take a long time (ie 45 minutes to 2 hours)
?resultsNames
resultsNames(dds_obj)  # see what comparisons got run
# get the young vs. old comparison
?results
results <- results(dds_obj, format = "DataFrame", contrast = c("age_category", "Old", "Young")) # this is case sensitive so be careful to match it with your age_category factors closely!
# write code here
head(results)
# write code here
view(results)
# write code here
View(results)
# write code here
dim(results)
rownames(results)
log2foldchange
log2foldchange(results)
# write code here
head(results)
View(results)
dim(results)
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- subset(rna_genes$gene_name[gene_mask])
rna_genes$genes$genename
rna_genes$gene_name
gene_mask
rna_genes_subset
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- subset.data.frame(rna_genes$gene_name[gene_mask])
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask,]
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask]
results <- data.frame(rna_genes_subset, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(padj))
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask]
results <- data.frame(rna_genes_subset, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
# HINT: to get the gene names, you will need to create a boolean mask that is T when rna_genes$gene_id %in% results@rownames, and F if otherwise, then use this mask to subset rna_genes$gene_names for only the names that are in the results df
colnames(results) <- c("Gene Name", "Gene ID", "log2foldchange", "p-value", "padj", "-log10(padj)") ## FIX
sig_results <- (results$p-value < 0.05)
sig_results <- (results$"p-value" < 0.05)
sig_results
my_example_df = data.frame(x = c('index 1', 'index 2', 'index 3', 'index 4', 'index 5'),
y = c(2,4,3,5,1))
order_indexes = order(my_example_df$y) # order by column "y"
# we would expect order_indexes to be c(5, 1, 3, 2, 4) since the value 2 has the index 5, the value 2 has the index 1, the value 3 has the index 3, etc.
order_indexes
my_example_df = my_example_df[order_indexes, ] # this rewrites the df based on the sorted rows
my_example_df # check your df to see if it is sorted by the y values
up_reg_results <- order(results$log2foldchange)
up_reg_results
up_reg_results <- order(results$log2foldchange)
up_reg_results
up_reg_results <- order(results$log2foldchange)
results <- results[up_reg_results, ]
results
# write code here
up_reg_results <- (results$log2foldchange > 1)
# write code here
neg_log_mask <- !(results$log2foldchange < -1)
down_reg_results <- results[neg_log_mask,]
down_reg_results <- down_reg_results[order(down_reg_results$log2foldchange)]
# write code here
neg_log_mask <- !(results$log2foldchange < -1)
down_reg_results <- results[neg_log_mask,]
down_reg_results <- down_reg_results[order(down_reg_results$log2foldchange),]
# write code here
head(up_reg_results)
head(down_reg_results)
?DESeqDataSetFromMatrix
dds <- DESeqDataSetFromMatrix(countData = rna_counts,
colData = rna_clinical,
design =~ vital_status + ajcc_pathologic_stage + age_category)
?DESeq
dds_obj <- DESeq(dds) # note: this will likely take a long time (ie 45 minutes to 2 hours)
?resultsNames
resultsNames(dds_obj)  # see what comparisons got run
# get the young vs. old comparison
?results
results <- results(dds_obj, format = "DataFrame", contrast = c("age_category", "Old", "Young")) # this is case sensitive so be careful to match it with your age_category factors closely!
# write code here
head(results)
View(results)
dim(results)
# write code here
head(results)
View(results)
dim(results)
# write code here, replace column#'s
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
rna_genes_subset <- rna_genes$gene_name[gene_mask]
results <- data.frame(rna_genes_subset, rownames(results), results$log2FoldChange, results$pvalue, results$padj, -log10(results$padj))
# HINT: to get the gene names, you will need to create a boolean mask that is T when rna_genes$gene_id %in% results@rownames, and F if otherwise, then use this mask to subset rna_genes$gene_names for only the names that are in the results df
colnames(results) <- c("Gene Name", "Gene ID", "log2foldchange", "p-value", "padj", "-log10(padj)") ## FIX
sig_results <- (results$"p-value" < 0.05)
up_reg_results <- results[order(results$log2foldchange), ]
# write code here
up_reg_results <- up_reg_results[(up_reg_results$log2foldchange > 1),]
# write code here
neg_log_mask <- !(results$log2foldchange < -1)
down_reg_results <- results[neg_log_mask,]
down_reg_results <- down_reg_results[order(down_reg_results$log2foldchange),]
# write code here
head(up_reg_results)
head(down_reg_results)
View(down_reg_results)
# write code here
rownames(up_reg_results) <- up_reg_results$`Gene ID`
rownames(down_reg_results) <- down_reg_results$`Gene ID`
head(up_reg_results)
head(down_reg_results)
# write code here
results(down_reg_results)
# write code here
write.csv(up_reg_results, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/up_reg_results_data.csv", row.names = TRUE)
write.csv(down_reg_results, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/down_reg_results_data.csv", row.names = TRUE)
write.csv(results, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/results_data.csv", row.names = TRUE)
# install (using BiocManager) and load "EnhancedVolcano"
BiocManager::install("EnhancedVolcano")
library(EnchancedVolcano)
# install (using BiocManager) and load "EnhancedVolcano"
BiocManager::install("EnhancedVolcano")
library(EnhancedVolcano)
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2FoldChange", y = "pvalue")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "pvalue")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", none, shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", scale=none , shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
# create plot here
par(mar=c(10,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
par(mar=c(10,10,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
par(mar=c(1,1,1,1))
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value")
# create plot here
jpeg("Enhanced_Volcano_Plot.jpg")
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
dev.off()
# create plot here
jpeg("Enhanced_Volcano_Plot.jpg")
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
# create plot here
EnhancedVolcano(results, lab = rownames(results), x = "log2foldchange", y = "p-value", shape = c(1, 4, 23, 25))
knitr::opts_knit$set(root.dir = normalizePath("/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data"))
# install and load maftools, TCGAbiolinks, and ggplot2
if(!require(ggplot2)){
install.packages("ggplot2")
}
library(ggplot2)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks")
if (!require("maftools", quietly = TRUE))
BiocManager::install("maftools")
library(BiocManager)
library(TCGAbiolinks)
library(maftools)
clinical <- read.csv("/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/brca_clinical_data.csv")
maf_query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Simple Nucleotide Variation",
access = "open", # we only have access to somatic mutations which are open access
data.type = "Masked Somatic Mutation",
workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking"
)
GDCdownload(maf_query)
maf <- GDCprepare(maf_query) # as long as it runs, ignore any errors
maf_object <- read.maf(maf = maf,
clinicalData = clinical,
isTCGA = TRUE)
mutation_data <-maf_object@data
write.csv(mutation_data,'tcga_brca_mutation.csv',row.names=F)
mutation_data <- maf_object@data
write.csv(mutation_data, 'tcga_brca_mutation.csv',row.names=F)
mutation_data <- maf_object@data
write.csv(mutation_data, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/tcga_brca_mutation.csv",row.names=F)
mutation_data <- maf_object@clinical.data
write.csv(mutation_data, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/tcga_brca_mutation.csv",row.names=F)
maf_object@data
mutation_data <- maf_object@data
write.csv(mutation_data, "/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data/tcga_brca_mutation.csv",row.names=F)
maf_object@data$Tumor_Sample_Barcode
knitr::opts_knit$set(root.dir = normalizePath("/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/analysis_data"))
# Read in csv files
rna_counts <- read.csv("brca_rna_count_data.csv", row.names = 1)
rna_genes <- read.csv("brca_rna_gene_data.csv")
rna_clinical <- read.csv("brca_rna_clinical_data.csv")
View(rna_genes)
View(rna_counts)
View(rna_clinical)
View(clinical)
View(mutation_data)
View(clinical)
gene_mask <- ifelse(rna_genes$gene_id %in% results@rownames, T, F)
View(clinical)
sum(is.na(clinical$age_at_initial_pathologic_diagnosis))
young_mask <- ifelse(age_cleaned_clinical$age_at_initial_pathologic_diagnosis <= 35, TRUE, FALSE)
young_mask <- ifelse(clinical$age_at_initial_pathologic_diagnosis <= 35, TRUE, FALSE)
middle_mask <- ifelse(clinical$age_at_initial_pathologic_diagnosis > 35 & clinical$age_at_initial_pathologic_diagnosis <= 50, TRUE, FALSE)
old_mask <- ifelse(clinical$age_at_initial_pathologic_diagnosis > 50, TRUE, FALSE)
age_cleaned_clinical$age_at_diagnosis_status <- ifelse(young_mask, "Young", ifelse(middle_mask, "Middle", "Old"))
clinical$age_at_diagnosis_status <- ifelse(young_mask, "Young", ifelse(middle_mask, "Middle", "Old"))
clinical$survival_time <- ifelse(is.na(clinical$days_to_death), clinical$survival_time <- age_cleaned_clinical$days_to_last_followup, age_cleaned_clinical$survival_time <- age_cleaned_clinical$days_to_death)
clinical$survival_time <- ifelse(is.na(clinical$days_to_death), clinical$survival_time <- clinical$days_to_last_followup, clinical$survival_time <- clinical$days_to_death)
inf_mask <- ifelse(clinical$survival_time == "-Inf", FALSE, TRUE)
clinical <- clinical[inf_mask, ]
na_mask <- ifelse(is.na(clinical$survival_time), FALSE, TRUE)
clinical <- clinical[na_mask, ]
clinical$death_event <- ifelse(clinical$vital_status == "Alive", clinical$death_event <- FALSE, clinical$death_event <- TRUE)
survival_object <- Surv(time = ifelse(clinical$vital_status == "Alive", clinical$days_to_last_followup, clinical$days_to_death), event = ifelse(clinical$vital_status == "Alive", FALSE, TRUE))
if(!require(survival)){
install.packages("survival")
}
library(survival)
if(!require(survminer)){
install.packages("survminer")
}
survival_object <- Surv(time = ifelse(clinical$vital_status == "Alive", clinical$days_to_last_followup, clinical$days_to_death), event = ifelse(clinical$vital_status == "Alive", FALSE, TRUE))
fit_object <- survfit(survival_object ~ clinical$age_at_diagnosis_status, data = clinical)
survplot <- ggsurvplot(fit_object , pval=TRUE, ggtheme =
theme(plot.margin = unit(c(1,1,1,1), "cm")), legend =
"right")
KM_plot <- survplot$plot + theme_bw() + theme(axis.title =
element_text(size=20), axis.text = element_text(size=16),
legend.title = element_text(size=14), legend.text =
element_text(size=12))
KM_plot
clinical_drug <- GDCprepare_clinic(query = clin_query,
clinical.info = "drug")
write.csv(clinical,"clinical.csv")
clin_query <- GDCquery(project = "TCGA-GBM",data.category = "Clinical",file.type = "xml")
if(!require(ggplot2)){
install.packages("ggplot2")
}
library(ggplot2)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks")
if (!require("maftools", quietly = TRUE))
BiocManager::install("maftools")
library(BiocManager)
library(TCGAbiolinks)
library(maftools)
BiocManager::install("DESeq2")
library(DESeq2)
BiocManager::install("EnhancedVolcano")
library(EnhancedVolcano)
if(!require(survival)){
install.packages("survival")
}
library(survival)
if(!require(survminer)){
install.packages("survminer")
}
clin_query <- GDCquery(project = "TCGA-GBM",data.category = "Clinical",file.type = "xml")
#GDCdownload(clin_query)
clinical <- GDCprepare_clinic(clin_query,
clinical.info = "patient")
GDCdownload(clin_query)
clinical <- GDCprepare_clinic(clin_query,
clinical.info = "patient")
colnames(clinical)[ colnames(clinical) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
write.csv(clinical,"clinical.csv")
clinical_drug <- GDCprepare_clinic(query = clin_query,
clinical.info = "drug")
clinical_rad <- GDCprepare_clinic(query = clin_query,
clinical.info = "radiation")
clinical <- merge(clinical, clinical_drug, by = "bcr_patient_barcode")
View(clinical)
View(clinical_drug)
colnames(clinical_drug)[ colnames(clinical_drug) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
clinical <- merge(clinical, clinical_drug, by = "Tumor_Sample_Barcode")
sum(is.na(clinical$age_at_initial_pathologic_diagnosis))
young_mask <- ifelse(clinical$age_at_initial_pathologic_diagnosis <= 35, TRUE, FALSE)
middle_mask <- ifelse(clinical$age_at_initial_pathologic_diagnosis > 35 & clinical$age_at_initial_pathologic_diagnosis <= 50, TRUE, FALSE)
old_mask <- ifelse(clinical$age_at_initial_pathologic_diagnosis > 50, TRUE, FALSE)
clinical$age_at_diagnosis_status <- ifelse(young_mask, "Young", ifelse(middle_mask, "Middle", "Old"))
clinical$survival_time <- ifelse(is.na(clinical$days_to_death), clinical$survival_time <- clinical$days_to_last_followup, clinical$survival_time <- clinical$days_to_death)
inf_mask <- ifelse(clinical$survival_time == "-Inf", FALSE, TRUE)
clinical <- clinical[inf_mask, ]
na_mask <- ifelse(is.na(clinical$survival_time), FALSE, TRUE)
clinical <- clinical[na_mask, ]
clinical$death_event <- ifelse(clinical$vital_status == "Alive", clinical$death_event <- FALSE, clinical$death_event <- TRUE)
survival_object <- Surv(time = ifelse(clinical$vital_status == "Alive", clinical$days_to_last_followup, clinical$days_to_death), event = ifelse(clinical$vital_status == "Alive", FALSE, TRUE))
survival_object <- Surv(time = ifelse(clinical$vital_status == "Alive", clinical$days_to_last_followup, clinical$days_to_death), event = ifelse(clinical$vital_status == "Alive", FALSE, TRUE))
fit_object <- survfit(survival_object ~ clinical$age_at_diagnosis_status, data = clinical)
clinical$death_event <- ifelse(clinical$vital_status == "Alive", clinical$death_event <- FALSE, clinical$death_event <- TRUE)
clinical$vital_status <- ifelse(is.na(clinical$days_to_death), 'Alive', 'Dead')
clinical$death_event <- ifelse(clinical$vital_status == "Alive", clinical$death_event <- FALSE, clinical$death_event <- TRUE)
survival_object <- Surv(time = ifelse(clinical$vital_status == "Alive", clinical$days_to_last_followup, clinical$days_to_death), event = ifelse(clinical$vital_status == "Alive", FALSE, TRUE))
fit_object <- survfit(survival_object ~ clinical$age_at_diagnosis_status, data = clinical)
survplot <- ggsurvplot(fit_object , pval=TRUE, ggtheme =
theme(plot.margin = unit(c(1,1,1,1), "cm")), legend =
"right")
KM_plot <- survplot$plot + theme_bw() + theme(axis.title =
element_text(size=20), axis.text = element_text(size=16),
legend.title = element_text(size=14), legend.text =
element_text(size=12))
KM_plot
jpeg('KM_plot_age.jpg')
KM_plot <- survplot$plot + theme_bw() + theme(axis.title =
element_text(size=20), axis.text = element_text(size=16),
legend.title = element_text(size=14), legend.text =
element_text(size=12))
KM_plot
dev.off()
setwd("/Users/christopherahn/Documents/QBIO_490/qbio-490-Christopher-Ahn/final_project_group3/outputs")
jpeg('KM_plot_age.jpg')
KM_plot <- survplot$plot + theme_bw() + theme(axis.title =
element_text(size=20), axis.text = element_text(size=16),
legend.title = element_text(size=14), legend.text =
element_text(size=12))
KM_plot
dev.off()
